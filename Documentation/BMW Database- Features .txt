==================================
  BUNKER MOTOR WARRIORS- BACKEND
==================================

  + Features Finished
      - JSON insert into model: mobile_gps            (use URL '/mobile_gps/create')        params: string udid, datetime iphone_time, float latitude, float longitude, float speed
      - JSON insert into model: mobile_lights         (use URL '/mobile_lights/create')     params: string udid, datetime iphone_time, int num_lights, float time_at_red, float time_at_green
      - JSON insert into model: car_trip_ranges       (use URL '/car_trip_ranges/create')   params: string udid, datetime iphone_time
      - JSON insert into model: profile_names         (use URL '/profile_names/create')     params: string udid, string user_name, string first_name, string last_name
      
      - Retrieving recent achievements
        - Everytime you send a POST request to insert data into the backend, you will receive an array of any achievements you may have recently earned.
        - The JSON format is as follows: [ {"unlocked_achievement":...}, {"unlocked_achievement":...}, ... ] where each entry has the following
            {"unlocked_achievement": {"achievement_id":int, "achievement_name":string, "carma_points":int, "pic_address":string, "time_unlocked":datetime, "udid":string, "user_name":string}
        - Note: you can receive an empty array [] if no achievements were unlocked.
      
      The below features' routes are deprecated. See Query Controller API to access them
      - Query for rankings: total distance            (use URL '/leaderboard/total_distance')
      - Query for rankings: max speed                 (use URL '/leaderboard/max_speed') (units: meters per sec)
      - Query for rankings: average speed             (use URL '/leaderboard/avg_speed') (units: meters per sec)
      - Query for rankings: time spent at redlights   (use URL '/leaderboard/time_at_redlights')
      - Query for rankings: total redlights           (use URL '/leaderboard/redlight_count')
      - Query for rankings: total greenlights         (use URL '/leaderboard/greenlight_count')
      
      - Query for user rank: total distance           (use URL '/leaderboard/total_distance/user_rank?udid=...')
      - Query for user rank: max speed                (use URL '/leaderboard/max_speed/user_rank?udid=...') (units: meters per sec)
      - Query for user rank: average speed            (use URL '/leaderboard/avg_speed/user_rank?udid=...') (units: meters per sec)
      - Query for user rank: time spent at redlights  (use URL '/leaderboard/time_at_redlights/user_rank?udid=...')
      - Query for user rank: total redlights          (use URL '/leaderboard/redlight_count/user_rank?udid=...')
      - Query for user rank: total greenlights        (use URL '/leaderboard/greenlight_count/user_rank?udid=...')
      
      - Query for average speed of location           (use URL '/mobile_gps/get_avg_speed_of_location?latitude=...&longitude=...')
      - Query for user achievements                   (use URL '/unlocked_achievements/user?udid=...') returns array of entries {udid, user_name, achievement_id, achievement_name, time_unlocked}
      
      
      
  + Features To Do
      - Implement models for taking in car/HMI data (Minh Ly)
      - Implement query for finding average speed of location (boxing all points in vicinity) and finding n closest points (Minh Ly)
      - Modify the way distance is calculated using GPS coordinates; current Euclidean implementation is inaccurate (David Kamm)
      - Modify current 'rankings' queries to take in new parameters. Work with Query Controller API (Minh & David)
      - Clean out deprecated database models (e.g.: incorrectly named models, columns, etc.) (David)
      - Look at generating unique IDs: http://rubyforge.org/projects/uuidtools/ (Minh Ly)
      